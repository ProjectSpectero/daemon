@using System
@using System.Net
@using ServiceStack
@using RazorLight
@using Spectero.daemon.Libraries.Core
@model Spectero.daemon.Libraries.Services.OpenVPN.OpenVPNConfig
@inherits TemplatePage<Spectero.daemon.Libraries.Services.OpenVPN.OpenVPNConfig>
@{
    DisableEncoding = true;

    var localNetwork = IPNetwork.Parse(Model.Listener.Network);
    var localNetMask = localNetwork.Netmask;

    var pkcs12Header = Model.PKCS12Certificate.Substring(0, 64);
    var pkcs12Remainder = Model.PKCS12Certificate.Substring(64);

    var listenerString = "";

    switch (Model.Listener.Protocol)
    {
        case TransportProtocols.TCP:
            listenerString = "tcp-server";
            break;
        case TransportProtocols.UDP:
            listenerString = "udp";
            break;
        default:
            listenerString = "udp";
            break;
    }
}
########################################################################################################################
# Spectero Server - OpenVPN Configuration (Autogenerated)            
# Generated by @Model.Identity.GetGuid() at @DateTime.UtcNow (UTC)    
########################################################################################################################

# Which local IP address should OpenVPN
# listen on? (optional)

local @Model.Listener.IPAddress
port @Model.Listener.Port

# Options - [proto-uninitialized] [udp] [tcp-server] [tcp-client] [tcp] [udp6] [tcp6-server] [tcp6-client] [tcp6]
proto @listenerString


# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel, we don't support these.
# Use "dev tap0" if you are ethernet bridging

dev tun

# SSL/TLS root certificate (ca), certificate
# (cert), and private key (key).  Each client
# and the server must have their own cert and
# key file.  The server and all clients will
# use the same ca file.
#
# See the "easy-rsa" directory for a series
# of scripts for generating RSA certificates
# and private keys.  Remember to use
# a unique Common Name for the server
# and each of the client certificates.
#
# Any X509 key management system can be used.
# OpenVPN can also use a PKCS #12 formatted key file
# (see "pkcs12" directive in man page).

<pkcs12>
@pkcs12Header
@pkcs12Remainder
</pkcs12>


# <ca>
#     -----BEGIN CERTIFICATE-----
#     @*Model.CACert.PublicKey*@
#     -----END CERTIFICATE-----
# </ca>
# 
# <cert>
#     -----BEGIN CERTIFICATE-----
#     @*Model.ServerCert.PublicKey*@
#     -----END CERTIFICATE-----
# </cert>
# 
# <key>
#     -----BEGIN PRIVATE KEY-----
#     @*Model.ServerCert.PrivateKey*@
#     -----END PRIVATE KEY-----
# </key>

# Diffie hellman parameters.
# Generate your own with:
#   openssl dhparam -out dh2048.pem 2048
# This file will be shipped in, not generated.
dh dh2048.params

# Network topology
# Should be subnet (addressing via IP)
# unless Windows clients v2.0.9 and lower have to
# be supported (then net30, i.e. a /30 per client)
# Defaults to net30 (not recommended)
topology subnet
    
# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.

# TODO: The 2nd one is supposed to be the netmask.

server @localNetwork.Network @localNetMask
    
# Maintain a record of client - virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned.
ifconfig-pool-persist ipp.txt

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
# Example: ;push "route 192.168.10.0 255.255.255.0"
@foreach (var network in Model.PushedNetworks)
{
    @:push "route @network.Network @network.Netmask"
}

# To assign specific IP addresses to specific
# clients or if a connecting client has a private
# subnet behind it that should also have VPN access,
# use the subdirectory "ccd" for client-specific
# configuration files (see man page for more info).

# EXAMPLE: Suppose the client
# having the certificate common name "Thelonious"
# also has a small subnet behind his connecting
# machine, such as 192.168.40.128/255.255.255.248.
# First, uncomment out these lines:
;client-config-dir ccd
;route 192.168.40.128 255.255.255.248
# Then create a file ccd/Thelonious with this line:
#   iroute 192.168.40.128 255.255.255.248
# This will allow Thelonious' private subnet to
# access the VPN.  This example will only work
# if you are routing, not bridging, i.e. you are
# using "dev tun" and "server" directives.

# EXAMPLE: Suppose you want to give
# Thelonious a fixed VPN IP address of 10.9.0.1.
# First uncomment out these lines:
;client-config-dir ccd
;route 10.9.0.0 255.255.255.252
# Then add this line to ccd/Thelonious:
#   ifconfig-push 10.9.0.1 10.9.0.2

# Suppose that you want to enable different
# firewall access policies for different groups
# of clients.  There are two methods:
# (1) Run multiple OpenVPN daemons, one for each
#     group, and firewall the TUN/TAP interface
#     for each group/daemon appropriately.
# (2) (Advanced) Create a script to dynamically
#     modify the firewall in response to access
#     from different clients.  See man
#     page for more info on learn-address script.
;learn-address ./script

# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# or bridge the TUN/TAP interface to the internet
# in order for this to work properly).
# Example: push "redirect-gateway def1 bypass-dhcp"

@{
    string tmp = "";
    foreach (var option in Model.RedirectGateway)
    {
        tmp += option.ToString().ToLower() + " ";
    }
    tmp = tmp.Trim();
    if (!tmp.IsNullOrEmpty())
    {
        @:push "redirect-gateway @tmp"
    }        
}

# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
# The addresses below refer to the public
# DNS servers provided by opendns.com.
# Example: push "dhcp-option DNS 208.67.222.222"

@{
    foreach (var dhcpOption in Model.DhcpOptions)
    {
        @:push "dhcp-option @dhcpOption.Item1.ToString() @dhcpOption.Item2"
    }
}

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.

@if (Model.ClientToClient)
{
    @:client-to-client
}

# Uncomment this directive if multiple clients
# might connect with the same certificate/key
# files or common names.  This is recommended
# only for testing purposes.  For production use,
# each client should have its own certificate/key
# pair.
#
# IF YOU HAVE NOT GENERATED INDIVIDUAL
# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
# UNCOMMENT THIS LINE OUT.

@if (Model.AllowMultipleConnectionsFromSameClient)
{
    @:duplicate-cn
}

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 120

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
;tls-auth ta.key 0 # This file is secret

# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
;cipher BF-CBC        # Blowfish (default)
;cipher AES-128-CBC   # AES
;cipher DES-EDE3-CBC  # Triple-DES

# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
comp-lzo

# The maximum number of concurrently connected
# clients we want to allow.
# Example: max-clients 100

@if (Model.MaxClients != 0)
{
    @:max-clients @Model.MaxClients
}


# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
#
# You can uncomment this out on
# non-Windows systems.
;user nobody
;group nogroup

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status openvpn-status.log

# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
;log         openvpn.log
;log-append  openvpn.log

# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb 3

# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
mute 5

management 127.0.0.1 @Model.Listener.ManagementPort

username-as-common-name
script-security 2
auth-user-pass-verify auth.sh via-file # TODO: Make this work with Windows / such too.